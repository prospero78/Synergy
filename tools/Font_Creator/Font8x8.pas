unit Font8x8;
{ Модуль содержит русский (+английский шрифт, потом) размером 8х8.
   Сделано в форме массива, каждая буква имеет символьное имя.
   Этот модуль не предназначен для компиляции в составе Font_Creator }

interface


type
   /// Тип описывает литеры цифр
   tDig = class
   public 
      d0: array[0..7] of byte = (0, 62, 67, 69, 73, 81, 97, 62);
      d1: array[0..7] of byte = (0, 1, 3, 5, 1, 1, 1, 1);
      d2: array[0..7] of byte = (0, 62, 65, 2, 4, 8, 48, 127);
      d3: array[0..7] of byte = (0, 127, 2, 28, 2, 1, 65, 62);
      d4: array[0..7] of byte = (0, 3, 5, 9, 17, 33, 127, 1);
      d5: array[0..7] of byte = (0, 127, 64, 126, 1, 1, 65, 62);
      d6: array[0..7] of byte = (0, 62, 64, 64, 126, 65, 65, 62);
      d7: array[0..7] of byte = (0, 127, 1, 2, 4, 8, 8, 8);
      d8: array[0..7] of byte = (0, 62, 65, 65, 62, 65, 65, 62);
      d9: array[0..7] of byte = (0, 62, 65, 65, 66, 1, 1, 62);
   end;
   /// Специальные литеры
   tSpez = class
   public 
      /// пробел
      space: array[0..7] of byte = (0, 0, 0, 0, 0, 0, 0, 0);
      /// подчёркивание
      strike: array[0..7] of byte = (0, 0, 0, 0, 0, 0, 0, 62);
      /// минус
      minus: array[0..7] of byte = (0, 0, 0, 0, 127, 0, 0, 0);
      /// плюс
      plus: array[0..7] of byte = (0, 8, 8, 8, 127, 8, 8, 8);
      /// умножить
      multi: array[0..7] of byte = (0, 0, 42, 28, 62, 28, 42, 0);
      /// деление
      _div: array[0..7] of byte = (0, 8, 0, 0, 127, 0, 0, 8);
      /// запятая
      comma: array[0..7] of byte = (0, 0, 7, 7, 7, 1, 1, 3);
      /// точка
      dot: array[0..7] of byte = (0, 0, 0, 0, 0, 28, 28, 28);
      /// левая круглая скобка
      lrb: array[0..7] of byte = (0, 4, 8, 24, 24, 24, 8, 4);
      /// правая круглая скобка
      rrb: array[0..7] of byte = (0, 16, 8, 12, 12, 12, 8, 16);
      /// левая квадратная скобка
      lsb: array[0..7] of byte = (0, 28, 16, 16, 16, 16, 16, 28);
      /// правая квадратная скобка
      rsb: array[0..7] of byte = (0, 28, 4, 4, 4, 4, 4, 28);
      /// двойные кавычки
      dqt: array[0..7] of byte = (0, 102, 102, 102, 0, 0, 0, 0);
      /// одиночные кавычки
      sqt: array[0..7] of byte = (0, 24, 24, 24, 0, 0, 0, 0);
      /// апостроф
      apo: array[0..7] of byte = (0, 96, 120, 60, 12, 0, 0, 0);
      /// тильда
      tilda: array[0..7] of byte = (0, 0, 0, 0, 50, 76, 0, 0);
      /// восклицательный знак
      hlp_akk: array[0..7] of byte =  (0, 0, 24, 24, 24, 24, 0, 24);
      /// решётка
      bang: array[0..7] of byte = (0, 18, 127, 18, 36, 127, 36, 0);
      /// номер
      numer: array[0..7] of byte = (0, 72, 106, 109, 106, 88, 91, 72);
      /// доллар
      dol: array[0..7] of byte = (0, 62, 73, 72, 62, 9, 73, 62);
      /// точка с запятой
      cdot: array[0..7] of byte = (0, 28, 28, 0, 28, 28, 4, 12);
      /// процент
      percent: array[0..7] of byte = (0, 33, 82, 36, 8, 18, 37, 66);
      /// двоеточие
      ddot: array[0..7] of byte = (0, 24, 24, 0, 0, 0, 24, 24);
      /// амперсанд
      amp: array[0..7] of byte = (0, 24, 36, 40, 16, 42, 36, 27);
      /// вопрос
      qst: array[0..7] of byte = (0, 30, 33, 2, 4, 8, 0, 8);
      /// равно
      equ: array[0..7] of byte = (0, 0, 127, 0, 0, 127, 0, 0);
      /// слэш
      hlp_slh: array[0..7] of byte = (0, 1, 2, 4, 8, 16, 32, 64);
      /// обратный слэш
      bslh: array[0..7] of byte = (0, 64, 32, 16, 8, 4, 2, 1);
      /// меньше
      lequ: array[0..7] of byte = (0, 3, 12, 48, 64, 48, 12, 3);
      /// больше
      requ: array[0..7] of byte = (0, 96, 24, 6, 1, 6, 24, 96);
      /// степень
      exp: array[0..7] of byte = (0, 8, 20, 34, 65, 0, 0, 0);
      /// левая фигурная скобка
      lfb: array[0..7] of byte = (0, 12, 16, 16, 112, 16, 16, 12);
      /// правая фигурная скобка
      rfb: array[0..7] of byte = (0, 48, 8, 8, 14, 8, 8, 48);
   end;
   /// Английские буквы
   tLetEn = class
   public 
      bA: array[0..7] of byte = (0, 8, 20, 34, 65, 127, 65, 65);
      sA: array[0..7] of byte = (0, 0, 30, 1, 31, 33, 35, 29);
      
      bB: array[0..7] of byte = (0, 126, 65, 65, 126, 65, 65, 126);
      sB: array[0..7] of byte = (0, 0, 32, 32, 62, 33, 33, 30);
      
      bC: array[0..7] of byte = (0, 62, 65, 64, 64, 64, 65, 62);
      sC: array[0..7] of byte = (0, 0, 30, 33, 32, 32, 33, 30);
      
      bD: array[0..7] of byte = (0, 124, 66, 65, 65, 65, 66, 124);
      sD: array[0..7] of byte = (0, 0, 1, 1, 31, 33, 33, 31);
      
      bE: array[0..7] of byte = (0, 127, 64, 64, 124, 64, 64, 127);
      sE: array[0..7] of byte = (0, 0, 30, 33, 38, 56, 33, 30);
      
      bF: array[0..7] of byte = (0, 127, 64, 64, 124, 64, 64, 64);
      sF: array[0..7] of byte = (0, 0, 6, 9, 8, 28, 8, 8);
      
      bG: array[0..7] of byte = (0, 62, 64, 64, 79, 65, 65, 62);
      sG: array[0..7] of byte = (0, 0, 30, 33, 33, 31, 1, 30);
      
      bH: array[0..7] of byte = (0, 65, 65, 65, 127, 65, 65, 65);
      sH: array[0..7] of byte = (0, 0, 32, 32, 62, 33, 33, 33);
      
      bI: array[0..7] of byte = (0, 24, 24, 24, 24, 24, 24, 24);
      sI: array[0..7] of byte = (0, 0, 12, 0, 12, 12, 12, 12);
      
      bJ: array[0..7] of byte = (0, 127, 1, 1, 1, 1, 65, 62);
      sJ: array[0..7] of byte = (0, 0, 12, 0, 12, 12, 44, 28);
      
      bK: array[0..7] of byte = (0, 65, 66, 68, 120, 68, 66, 65);
      sK: array[0..7] of byte = (0, 0, 33, 38, 56, 36, 34, 33);
      
      bL: array[0..7] of byte = (0, 64, 64, 64, 64, 64, 64, 127);
      sL: array[0..7] of byte = (0, 0, 16, 16, 16, 16, 16, 14);
      
      bM: array[0..7] of byte = (0, 65, 99, 85, 73, 65, 65, 65);
      sM: array[0..7] of byte = (0, 0, 52, 42, 42, 42, 42, 42);
      
      bL: array[0..7] of byte = (0, 65, 99, 85, 73, 65, 65, 65);
s L: array[0..7] of byte = (0, 0, 52, 42, 42, 42, 42, 42);
   end;
   /// Русские буквы
   tLetRu = class
   public 
      /// Литера А
      bA: array[0..7] of byte = (0, 3, 5, 9, 17, 63, 65, 65);
      /// Литера а
      sA: array[0..7] of byte = (0, 0, 28, 2, 30, 34, 34, 29);
      
      /// Литера Б
      bB: array[0..7] of byte = (0, 126, 64, 126, 65, 65, 65, 126);
      /// Литера б
      sB: array[0..7] of byte = (0, 1, 30, 32, 62, 33, 33, 30);
      
      /// Литера В
      bW: array[0..7] of byte = (0, 124, 66, 68, 126, 65, 65, 126);
      /// Литера в
      sW: array[0..7] of byte = (0, 0, 30, 33, 62, 33, 33, 30);
      
      /// Литера Г
      bG: array[0..7] of byte = (0, 127, 65, 64, 64, 64, 64, 64);
      /// Литера г
      sG: array[0..7] of byte = (0, 0, 30, 33, 6, 24, 33, 30);
      
      /// Литера Д
      bD: array[0..7] of byte = (0, 62, 18, 18, 18, 34, 127, 65);
      /// Литера д
      sD: array[0..7] of byte = (0, 0, 14, 10, 10, 18, 63, 63);
      
      /// Литера Е
      bE: array[0..7] of byte = (0, 127, 64, 124, 64, 64, 64, 127);
      /// Литера е
      sE: array[0..7] of byte = (0, 0, 30, 33, 63, 32, 33, 30);
      
      /// Литера Ё
      bE2: array[0..7] of byte = (0, 18, 127, 64, 124, 64, 64, 127);
      /// Литера ё
      sE2: array[0..7] of byte = (0, 18, 30, 33, 63, 32, 33, 30);
      
      /// Литера Ж
      bZh: array[0..7] of byte = (0, 73, 42, 28, 42, 73, 73, 73);
      /// Литера ж
      sZh: array[0..7] of byte = (0, 0, 21, 21, 14, 21, 21, 21);
      
      /// Литера З
      bZ: array[0..7] of byte = (0, 62, 65, 14, 1, 1, 65, 62);
      /// Литера з
      sZ: array[0..7] of byte = (0, 0, 30, 33, 14, 1, 33, 30);
      
      /// Литера И
      bI: array[0..7] of byte = (0, 65, 67, 69, 73, 81, 97, 65);
      /// Литера и
      sI: array[0..7] of byte = (0, 0, 33, 35, 37, 41, 49, 33);
      
      /// Литера Й
      bI2: array[0..7] of byte = (0, 89, 65, 67, 69, 73, 81, 97);
      /// Литера й
      sI2: array[0..7] of byte = (0, 0, 12, 33, 35, 37, 41, 49);
      
      /// Литера К
      bK: array[0..7] of byte = (0, 67, 76, 112, 72, 68, 66, 65);
      /// Литера к
      sK: array[0..7] of byte = (0, 0, 33, 34, 60, 34, 33, 33);
      
      /// Литера Л
      bL: array[0..7] of byte = (0, 15, 17, 17, 17, 17, 17, 97);
      /// Литера л
      sL: array[0..7] of byte = (0, 0, 15, 17, 17, 17, 17, 33);
      
      /// Литера М
      bM: array[0..7] of byte = (0, 65, 99, 99, 85, 85, 73, 73);
      /// Литера м
      sM: array[0..7] of byte = (0, 0, 17, 27, 27, 31, 21, 21);
      
      /// Литера Н
      bN: array[0..7] of byte = (0, 65, 65, 65, 127, 65, 65, 65);
      /// Литера н
      sN: array[0..7] of byte = (0, 0, 33, 33, 63, 33, 33, 33);
      
      /// Литера О
      bO: array[0..7] of byte = (0, 62, 65, 65, 65, 65, 65, 62);
      /// Литера о
      sO: array[0..7] of byte = (0, 0, 30, 33, 33, 33, 33, 30);
      
      /// Литера П
      bP: array[0..7] of byte = (0, 127, 65, 65, 65, 65, 65, 65);
      /// Литера п
      sP: array[0..7] of byte = (0, 0, 63, 33, 33, 33, 33, 33);
      
      /// Литера Р
      bR: array[0..7] of byte = (0, 126, 65, 65, 65, 126, 64, 64);
      /// Литера р
      sR: array[0..7] of byte = (0, 0, 62, 63, 33, 62, 32, 32);
      
      /// Литера С
      bS: array[0..7] of byte = (0, 62, 65, 64, 64, 64, 65, 62);
      /// Литера с
      sS: array[0..7] of byte = (0, 0, 30, 33, 32, 32, 33, 30);
      
      /// Литера Т
      bT: array[0..7] of byte = (0, 127, 8, 8, 8, 8, 8, 8);
      /// Литера т
      sT: array[0..7] of byte = (0, 0, 31, 4, 4, 4, 4, 4);
      
      /// Литера У
      bU: array[0..7] of byte = (0, 65, 65, 65, 63, 1, 65, 62);
      /// Литера у
      sU: array[0..7] of byte = (0, 0, 33, 33, 31, 1, 33, 30);
      
      /// Литера Ф
      bF: array[0..7] of byte = (0, 62, 73, 73, 73, 62, 8, 8);
      /// Литера ф
      sF: array[0..7] of byte = (0, 0, 14, 21, 21, 21, 14, 4);
      
      /// Литера Х
      bKh: array[0..7] of byte = (0, 65, 34, 20, 8, 20, 34, 65);
      /// Литера А
      sKh: array[0..7] of byte = (0, 0, 33, 18, 12, 12, 18, 33);
      
      /// Литера Ц
      bTc: array[0..7] of byte = (0, 66, 66, 66, 66, 66, 127, 1);
      /// Литера ц
      sTc: array[0..7] of byte = (0, 0, 34, 34, 34, 34, 31, 1);
      
      /// Литера Ч
      bCh: array[0..7] of byte = (0, 65, 65, 65, 63, 1, 1, 1);
      /// Литера ч
      sCh: array[0..7] of byte = (0, 0, 33, 33, 33, 31, 1, 1);
      
      /// Литера Ш
      bSh: array[0..7] of byte = (0, 73, 73, 73, 73, 73, 73, 127);
      /// Литера ш
      sSh: array[0..7] of byte = (0, 21, 21, 21, 21, 21, 21, 31);
      
      /// Литера Щ
      bShh: array[0..7] of byte = (0, 84, 84, 84, 84, 84, 126, 2);
      /// Литера щ
      sShh: array[0..7] of byte = (0, 0, 42, 42, 42, 42, 63, 1);
      
      /// Литера Ъ
      bHz: array[0..7] of byte = (0, 96, 32, 32, 62, 33, 33, 62);
      /// Литера ъ
      sHz: array[0..7] of byte = (0, 0, 48, 16, 30, 17, 17, 30);
      
      /// Литера Ы
      bY: array[0..7] of byte = (0, 65, 65, 65, 121, 69, 69, 121);
      /// Литера ы
      sY: array[0..7] of byte = (0, 0, 33, 33, 57, 37, 37, 57);
      
      /// Литера Ь
      bSz: array[0..7] of byte = (0, 64, 64, 64, 126, 65, 65, 126);
      /// Литера ь
      sSz: array[0..7] of byte = (0, 0, 32, 32, 62, 33, 33, 62);
      
      /// Литера Э
      bEh: array[0..7] of byte = (0, 62, 65, 1, 31, 1, 65, 62);
      /// Литера э
      sEh: array[0..7] of byte = (0, 0, 30, 33, 15, 1, 33, 30);
      
      /// Литера Ю
      bYu: array[0..7] of byte = (0, 78, 81, 81, 113, 81, 81, 78);
      /// Литера ю
      sYu: array[0..7] of byte = (0, 0, 38, 41, 57, 41, 41, 38);
      
      /// Литера Я
      bJa: array[0..7] of byte = (0, 63, 65, 65, 63, 9, 17, 97);
      /// Литера я
      sJa: array[0..7] of byte = (0, 0, 31, 33, 33, 31, 9, 49);
   end;

implementation

begin

end. 
